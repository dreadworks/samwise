# SAMWISE #

Samwise the stoutharted. A store and forward messaging service.

![Samwise Threads](../img/sam_threads.png)

Please see the source code commentary for a thorough explanation of the different modules and the issue tracker for current bugs and planned features.


## Installation ##

```
./autogen.sh
make
```

This compiles `samd`, `sam_selftest` and `libsam.so`. The library `libsam` gets linked statically to the binaries. The dependencies are linked dynamically and you are responsible for their proper installation.


## Dependencies ##

### Building samwise ###

Samwise relies on some libraries:

| Library name                                       | Version  |
|----------------------------------------------------|----------|
| [ZeroMQ](http://zeromq.org/)                       |    4.0.5 |
| [CZMQ](http://czmq.zeromq.org/)                    |    3.0.0 |
| [Berkeley DB](http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/overview/index.html)| >= 5.1 |
| [RabbitMQ-C](https://github.com/alanxz/rabbitmq-c) |    0.5.2 |


### Render documentation ###

To render the documentation the program `doxygen` is used. The rendered documentation can be found in `/samwise/doc/*`.


## Tools ##

### Description ###

Currently there are a number of shell script files inside the `samwise/tools` directory. As their suffix hints, they are written for the [fish shell](fishshell.com). You can safely run them like `. tools/script.fish argument1`. Please see below for a documentation of the various scripts.


### Install dependencies locally - deps.fish ###

This script automatically downloads all libraries samwise depends on and installs them into the projects root directory. It creates a folder `/usr` used as the prefix to build all dependencies. Additionally, to be able to compile and link against the local installations, all required environmental veriables are set.

```bash
. tools/deps.fish
```


### Create a TAGS file - tags.fish ###

To efficiently jump to function definitions with emacs using `find-tag` and its friends, a TAGS file must be generated using the `etags` program. To build the symbol table and access the files containing the definitions and declarations, `tags.fish` clones all dependencies into `/.tags` and creates `/samwise/TAGS`.

```bash
. tools/tags.fish
```


### Release a new version - release.fish ###

This script updates all places where version numbers are used. Currently the touched files are `include/sam.h`, `Doxyfile` and `configure.ac`. A new `configure.scan` is created for this purpose. You can call it like this:

```bash
. tools/release.fish major minor patch [cflags]
# where major, minor and patch are numbers

# for example
. tools/release.fish 1 0 3

```


## Project Setup ##

### Code and Project Conventions ###

This project uses the [C Language Style for Scalability (CLASS)](http://rfc.zeromq.org/spec:21) code and project structure conventions. The projects name is `samwise`, the project abbreviation `sam` and the project prefix `sam_`. The specification applies to everything inside the `/samwise` directory. The C language level is C99.


### Constrictions of the CLASS spec ###

I wholeheartedly disagree that omitting the curly braces for one-line if statements is a good idea. So I'm going to break the CLASS spec for if statements:

```C
// always like this, please:
if (condition) {
    // ...
}
```
